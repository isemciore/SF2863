function [ maxDistance ] = SysEngDiscreate7( )
lambda_1 = 10;
lambda_2  = 20;
mu = 8;
delta_t = 0.001;
n1 = [0 1 2 3];
n2 = [3 2 1 0];

speedColumn = [18 10 14 0]';
referenceValue = [10.8801, 10.9107, 10.9375, 10.9610];
haveConverged=1;
for i = 1:4
    Probability_transition = ...
        [1-(lambda_2*delta_t+lambda_1*delta_t), lambda_2*delta_t, lambda_1*delta_t, 0;...
            3*mu*delta_t, 1-(lambda_1*delta_t+3*mu*delta_t), 0, lambda_1*delta_t; ...
            3*mu*delta_t, 0, 1-(lambda_2*delta_t+3*mu*delta_t), lambda_2*delta_t;...
            0, n1(i)*mu*delta_t, n2(i)*mu*delta_t, 1-3*mu*delta_t];
    averageSpeed = 0;
    currentState = [1 0 0 0];
    totalDistance = 0;
    counter = 1;
    totalDistance = totalDistance + currentState*speedColumn.*delta_t;
    oldAverage = 0;
    while(counter < 1001)
        counter = counter +1;
        nextState = currentState*Probability_transition;
        nextPosition = rand();
        if(nextPosition < nextState(1))
            tempState = [1 0 0 0];
        elseif(nextPosition < sum(nextState(1:2)))
            tempState = [0 1 0 0];
        elseif(nextPosition < sum(nextState(1:3)))
            tempState = [0 0 1 0];
        else
            tempState = [0 0 0 1];
        end
        totalDistance = totalDistance + tempState*speedColumn.*delta_t;
        oldAverage = averageSpeed;
        averageSpeed = totalDistance./(counter*delta_t);
        currentState = tempState;
    end
    
    if(false)
    a1 = sprintf('Strategy: n1=%s, n2=%s',num2str(n1(i)),num2str(n2(i)));
    disp(a1);
    a2 = sprintf('Average speed: %s',num2str(averageSpeed));
    disp(a2);
    a3 = sprintf('Steps for convergence within 10percent %s steps',num2str(counter));
    disp(a3)
    a4 = sprintf('Distance travelled %s is',num2str(totalDistance));
    disp(a4);
    end
    
    if((abs(averageSpeed-referenceValue(i)) < referenceValue(i)*0.01) && (haveConverged == 1))
    else
        haveConverged =0;
    end
          
    
end

end
            
